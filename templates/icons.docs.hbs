<!doctype html>
<html class="no-js" lang="">

<head>
    <meta charset="utf-8">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />

    <title>Sage Icons Preview</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css?family=Lato:100,200,300,400,500,600,700,800,900" rel="stylesheet">
    <meta name="description" content="">
    <style>
        * {
            font-family: 'Lato', Arial, sans-serif;
            font-size: 14px;
        }

        body {
            padding: 40px;
        }

        #main-container {
            max-width: 1024px;
            margin: 0 auto;
        }

        #icons-container {
            display: grid;
            grid-template-columns: repeat(6, 1fr);
            grid-gap: 20px;
        }

        .divider {
            margin: 20px 0 30px;
        }

        .grid-item {
            display: block;
            text-align: center;
            position: relative;
            padding-bottom: 40px;
            margin-bottom: 0 !important;
        }

        .grid-item .name {
            font-size: 12px;
        }

        .grid-item .codes {
            position: absolute;
            display: flex;
            justify-content: space-between;
            padding: 5px 20px;
            bottom: 0;
            left: 0;
            right: 0;
            border-top: 1px solid rgba(10, 10, 10, .1);
        }

        .grid-item .codes div {
            font-size: 10px;
            cursor: default;
            color: rgba(10, 10, 10, .6);
        }

        .preview {
            display:block;
            width: 32px;
            margin: 0 auto 10px;
            height: auto;
        }
    </style>
</head>
<body>
    <template id="icon-template">
        <div class="box grid-item">
            <img class="preview" src="path">
            <span class="name" title="icon name">Icon name</span>
            <div class="codes">
                <div class="glyph" title="font glyph">Glyph</div>
                <div class="codepoint" title="codepoint">Codepoint</div>
                <div class="unicode" title="unicode">Unicode</div>
            </div>
        </div>
    </template>
    <div id="main-container" class="box">
        <h1 class="is-size-3">Sage icons</h1>
        <div class="divider">
            <input id="filter-query" type="text" class="input is-medium">
        </div>
        <div id="icons-container">
        </div>
    </div>


    <script>
        const fullGlyphs = {{{json glyphs}}}
        const templateContents = document.querySelector('#icon-template').content
        const iconsContainerElement = document.querySelector('#icons-container')
        const searchInputElement = document.querySelector('#filter-query')

        const createIconTemplate = (template) => (icon) => {
          const newElement = template.cloneNode(true)
          newElement.querySelector('.name').innerText = icon.name;
          newElement.querySelector('.glyph').innerText = icon.glyph;
          newElement.querySelector('.codepoint').innerText = icon.codepoint;
          newElement.querySelector('.unicode').innerText = icon.unicode;
          // newElement.querySelector('.keywords').innerText = icon.description;
          newElement.querySelector('img.preview').src = icon.srcPath;

          return newElement.children[0];
        }

        const iconTemplate = createIconTemplate(templateContents)

        const renderItems = (glyphs) => {
            iconsContainerElement.innerHTML = glyphs.map(icon => iconTemplate(icon).outerHTML).join('')
        }

        const filterGlyphs = (phrase) => {
          const glyphs = phrase.length > 0 ? fullGlyphs.filter((glyph) => glyph.name.includes(phrase) || glyph.description.includes(phrase)) : fullGlyphs
          renderItems(glyphs)
        }

        filterGlyphs('');

        searchInputElement.addEventListener('keyup', (event) => filterGlyphs(event.target.value))
    </script>
</body>
</html>
